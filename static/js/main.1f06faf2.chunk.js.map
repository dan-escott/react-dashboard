{"version":3,"sources":["../../src/components/TileStatus.ts","../../src/components/Dashboard.tsx","../../src/components/Metric.tsx","../../src/components/Tile.tsx","App.tsx","index.tsx"],"names":["Dashboard","children","className","styles","Metric","props","fontAwesomeIcon","icon","value","Tile","color","data","datasets","label","fill","borderColor","backgroundColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","series","options","responsive","maintainAspectRatio","showLines","legend","display","animation","duration","elements","line","tension","point","radius","plugins","filler","propagate","scales","xAxes","type","gridLines","time","unit","yAxes","id","ticks","suggestedMin","suggestedMax","max","title","metricStyles","key","metric","sparkline","height","width","TileStatus","App","metrics","uom","faArrowUp","faArrowDown","sparklineData","x","y","min","status","Stale","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1f06faf2.chunk.js","sourcesContent":["export enum TileStatus {\n  Stale = 'stale'\n}\n","import React from 'react'\nimport { Tile } from './Tile'\nimport styles from './Dashboard.css'\n\nexport const Dashboard = ({\n  children\n}: {\n  children: React.ReactElement<typeof Tile>[]\n}) => {\n  return (\n    <div className={styles.dashboard}>{children.map((child) => child)}</div>\n  )\n}\n","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { MetricProps } from './MetricProps'\nimport styles from './Metric.css'\n\nexport const Metric = (props: { metric: MetricProps }) => {\n  const fontAwesomeIcon = <FontAwesomeIcon icon={props.metric.icon} />\n  const value = props.metric.formatter\n    ? props.metric.formatter(props.metric.value)\n    : props.metric.value.toString()\n\n  return (\n    <div className={styles.metric}>\n      {fontAwesomeIcon}&nbsp;{value}\n      {props.metric.uom}\n    </div>\n  )\n}\n","import React from 'react'\nimport { Scatter } from 'react-chartjs-2'\nimport styles from './Tile.css'\nimport metricStyles from './Metric.css'\nimport { Metric } from './Metric'\nimport { TileProps } from './TileProps'\n\nexport const Tile = (props: TileProps) => {\n  const color = 'rgba(255, 255, 255, 0.3)'\n  const data = {\n    datasets: [\n      {\n        label: '',\n        fill: 'origin',\n        borderColor: color,\n        backgroundColor: color,\n        pointBackgroundColor: color,\n        pointBorderColor: color,\n        pointHoverBackgroundColor: color,\n        pointHoverBorderColor: color,\n        data: props.sparklineData.series\n      }\n    ]\n  }\n\n  const options = {\n    responsive: true,\n    maintainAspectRatio: false,\n    showLines: true,\n    legend: {\n      display: false\n    },\n    animation: {\n      duration: 0\n    },\n    elements: {\n      line: {\n        tension: 0, // disables bezier curves\n        fill: true\n      },\n      point: {\n        radius: 0\n      }\n    },\n    plugins: {\n      filler: {\n        propagate: true\n      }\n    },\n    scales: {\n      xAxes: [\n        {\n          type: 'time',\n          display: false,\n          gridLines: {\n            display: false\n          },\n          time: {\n            unit: 'second'\n          }\n        }\n      ],\n      yAxes: [\n        {\n          id: 'A',\n          type: 'linear',\n          display: false,\n          ticks: {\n            suggestedMin: props.sparklineData.min,\n            suggestedMax: props.sparklineData.max\n          },\n          gridLines: {\n            display: false\n          }\n        }\n      ]\n    }\n  }\n\n  return (\n    <div\n      className={`${styles.tile} ${props.status ? styles[props.status] : ''}`}\n    >\n      <div className={styles.title}>{props.title}</div>\n      <div className={metricStyles.metrics}>\n        {props.metrics.map((metric) => (\n          <Metric key={metric.id} metric={metric} />\n        ))}\n      </div>\n      <div className={styles.sparkline}>\n        <Scatter data={data} options={options} height={100} width={338} />\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Dashboard, Tile, TileStatus } from '@dan-escott/react-dashboard'\nimport { faArrowUp, faArrowDown } from '@fortawesome/free-solid-svg-icons'\nimport '@dan-escott/react-dashboard/dist/index.css'\n\nconst App = () => {\n  return (\n    <div className=\"example-container\">\n      <Dashboard>\n\n        <Tile title=\"Tile 1\"\n          metrics={[\n            { id: 'kpi1', value: 1, uom: '%', icon: faArrowUp},\n            { id: 'kpi2', value: 1, uom: '%', icon: faArrowDown}\n          ]}\n          sparklineData={\n            { series: [\n              {x: '2021-01-01T00:00', y: 0},\n              {x: '2021-01-02T00:00', y: 60},\n              {x: '2021-01-03T00:00', y: 20},\n              {x: '2021-01-04T00:00', y: 50},\n              {x: '2021-01-05T00:00', y: 100}\n            ], min: 0, max: 100 }}\n          />\n\n        <Tile title=\"Tile 2\" metrics={[{ id: 'kpi1', value: 1, uom: '%', icon: faArrowUp}]} sparklineData={{ series: [], min: 0, max: 100 }} ></Tile>\n        <Tile title=\"Tile 3\" metrics={[{ id: 'kpi1', value: 1, uom: '%', icon: faArrowUp}]} sparklineData={{ series: [], min: 0, max: 100 }} ></Tile>\n        <Tile title=\"Tile 4\" metrics={[{ id: 'kpi1', value: 1, uom: '%', icon: faArrowUp}]} sparklineData={{ series: [], min: 0, max: 100 }} ></Tile>\n        <Tile title=\"Tile 5\" metrics={[{ id: 'kpi1', value: 1, uom: '%', icon: faArrowUp}]} sparklineData={{ series: [], min: 0, max: 100 }} ></Tile>\n        <Tile title=\"Tile 6\" metrics={[{ id: 'kpi1', value: 1, uom: '%', icon: faArrowUp}]} status={TileStatus.Stale} sparklineData={{ series: [], min: 0, max: 100 }} ></Tile>\n        <Tile title=\"Tile 7\" metrics={[{ id: 'kpi1', value: 1, uom: '%', icon: faArrowUp}]} sparklineData={{ series: [], min: 0, max: 100 }} ></Tile>\n\n      </Dashboard>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}