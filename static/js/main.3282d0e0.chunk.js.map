{"version":3,"sources":["../../src/components/TileStatus.tsx","../../src/components/Dashboard.tsx","../../src/components/Metric.tsx","../../src/components/Tile.tsx","App.tsx","index.tsx"],"names":["Dashboard","children","className","styles","child","Metric","props","fontAwesomeIcon","icon","value","Tile","color","data","datasets","label","fill","borderColor","backgroundColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","series","options","responsive","maintainAspectRatio","showLines","legend","display","animation","duration","elements","line","tension","point","radius","plugins","filler","propagate","scales","xAxes","type","gridLines","time","unit","yAxes","id","ticks","suggestedMin","suggestedMax","max","tile","title","metricStyles","metric","key","sparkline","height","width","TileStatus","App","metrics","uom","faArrowUp","faArrowDown","sparklineData","x","y","min","status","Stale","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3282d0e0.chunk.js","sourcesContent":["export enum TileStatus {\n    Stale = 'stale'\n}","import React from 'react';\nimport { Tile } from './Tile';\nimport styles from './Dashboard.css';\n\nexport const Dashboard = ({ children }: { children: React.ReactElement<typeof Tile>[] }) => (\n  <div className={styles.dashboard}>\n    {\n      children.map(child => (\n          child\n      ))\n    }\n  </div>\n);\n","import React from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { MetricProps } from \"./MetricProps\";\nimport styles from './Metric.css';\n\nexport const Metric = (props: { metric: MetricProps }) => {\n\n  const fontAwesomeIcon = <FontAwesomeIcon icon={props.metric.icon}></FontAwesomeIcon>;\n  const value = props.metric.formatter ? props.metric.formatter(props.metric.value) : props.metric.value.toString();\n\n  return (\n    <div className={styles.metric}>{fontAwesomeIcon}&nbsp;{value}{props.metric.uom}</div>\n  )\n}","import React from 'react';\nimport { Scatter } from 'react-chartjs-2';\nimport styles from './Tile.css';\nimport metricStyles from './Metric.css';\nimport { Metric } from './Metric';\nimport { TileProps } from './TileProps';\n\nexport const Tile = (props: TileProps) => {\n\n  const color = 'rgba(255, 255, 255, 0.3)';\n  const data = {\n    datasets: [\n      {\n        label: '',\n        fill: 'origin',\n        borderColor: color,\n        backgroundColor: color,\n        pointBackgroundColor: color,\n        pointBorderColor: color,\n        pointHoverBackgroundColor: color,\n        pointHoverBorderColor: color,\n        data: props.sparklineData.series\n      }\n    ]\n  };\n\n  const options = {\n\n    responsive: true,\n    maintainAspectRatio: false,\n    showLines: true,\n    legend: {\n      display: false\n    },\n    animation: {\n      duration: 0\n    },\n    elements: {\n      line: {\n        tension: 0, // disables bezier curves\n        fill: true\n      },\n      point: {\n        radius: 0\n      }\n    },\n    plugins: {\n      filler: {\n        propagate: true\n      }\n    },\n    scales: {\n      xAxes: [{\n        type: 'time',\n        display: false,\n        gridLines: {\n          display: false\n        },\n        time: {\n          unit: 'second'\n        }\n      }],\n      yAxes: [{\n        id: 'A',\n        type: 'linear',\n        display: false,\n        ticks: {\n          suggestedMin: props.sparklineData.min,\n          suggestedMax: props.sparklineData.max\n        },\n        gridLines: {\n          display: false\n        }\n      }]\n    },\n  };\n\n  return (\n    <div className={`${styles.tile} ${props.status ? styles[props.status] : ''}`}>\n      <div className={styles.title}>{props.title}</div>\n      <div className={metricStyles.metrics}>\n        {\n          props.metrics.map(metric =>\n            <Metric key={metric.id} metric={metric} />\n            )\n        }\n      </div>\n      <div className={styles.sparkline}>\n        <Scatter data={data} options={options} height={100} width={338} />\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Dashboard, Tile, TileStatus } from '@dan-escott/react-dashboard'\nimport { faArrowUp, faArrowDown } from '@fortawesome/free-solid-svg-icons'\nimport '@dan-escott/react-dashboard/dist/index.css'\n\nconst App = () => {\n  return (\n    <div className=\"example-container\">\n      <Dashboard>\n\n        <Tile title=\"Tile 1\"\n          metrics={[\n            { id: 'kpi1', value: 1, uom: '%', icon: faArrowUp},\n            { id: 'kpi2', value: 1, uom: '%', icon: faArrowDown}\n          ]}\n          sparklineData={\n            { series: [\n              {x: '2021-01-01T00:00', y: 0},\n              {x: '2021-01-02T00:00', y: 60},\n              {x: '2021-01-03T00:00', y: 20},\n              {x: '2021-01-04T00:00', y: 50},\n              {x: '2021-01-05T00:00', y: 100}\n            ], min: 0, max: 100 }}\n          />\n\n        <Tile title=\"Tile 2\" metrics={[{ id: 'kpi1', value: 1, uom: '%', icon: faArrowUp}]} sparklineData={{ series: [], min: 0, max: 100 }} ></Tile>\n        <Tile title=\"Tile 3\" metrics={[{ id: 'kpi1', value: 1, uom: '%', icon: faArrowUp}]} sparklineData={{ series: [], min: 0, max: 100 }} ></Tile>\n        <Tile title=\"Tile 4\" metrics={[{ id: 'kpi1', value: 1, uom: '%', icon: faArrowUp}]} sparklineData={{ series: [], min: 0, max: 100 }} ></Tile>\n        <Tile title=\"Tile 5\" metrics={[{ id: 'kpi1', value: 1, uom: '%', icon: faArrowUp}]} sparklineData={{ series: [], min: 0, max: 100 }} ></Tile>\n        <Tile title=\"Tile 6\" metrics={[{ id: 'kpi1', value: 1, uom: '%', icon: faArrowUp}]} status={TileStatus.Stale} sparklineData={{ series: [], min: 0, max: 100 }} ></Tile>\n        <Tile title=\"Tile 7\" metrics={[{ id: 'kpi1', value: 1, uom: '%', icon: faArrowUp}]} sparklineData={{ series: [], min: 0, max: 100 }} ></Tile>\n\n      </Dashboard>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}